;;(setq debug-on-error t)

;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-
;;; Initial configuration...
;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-

(add-to-list 'load-path (expand-file-name "~/devtools/emacs/site-lisp"))

(cond (
       nil ;; this is a stable config that works with emacs 23.4.1
       (add-to-list 'load-path (expand-file-name "~/devtools/emacs/site-lisp/ecb-latest"))
       (add-to-list 'load-path (expand-file-name "~/devtools/emacs/site-lisp/cedet-1.0/common"))
       (add-to-list 'load-path (expand-file-name "~/devtools/emacs/site-lisp/cedet-1.0"))
       (add-to-list 'load-path (expand-file-name "~/devtools/emacs/site-lisp/elib-1.0"))
       (add-to-list 'load-path (expand-file-name "~/devtools/emacs/site-lisp/jdee-2.4.0.1/lisp"))
       (load-file (expand-file-name "~/devtools/emacs/site-lisp/cedet-1.0/common/cedet.el"))
       )
      (
       t ;; this is a stable config that works with emacs 24.3.1
       (require 'semantic/analyze)
       (provide 'semantic-analyze)
       (provide 'semantic-ctxt)
       (provide 'semanticdb)
       (provide 'semanticdb-find)
       (provide 'semanticdb-mode)
       (provide 'semantic-load)
       (add-to-list 'load-path (expand-file-name "~/devtools/emacs/site-lisp/jdee-2.4.1/lisp"))
       (add-to-list 'load-path (expand-file-name "~/devtools/emacs/site-lisp/ecb-2.40"))
       (setq stack-trace-on-error t)
       )
      )

;;(load-file (expand-file-name "~/devtools/emacs/site-lisp/jdee-2.4.0.1/lisp/jde.el"))

(add-to-list 'load-path (expand-file-name "~/devtools/emacs/site-lisp/emacs-goodies-el-13"))
(add-to-list 'load-path (expand-file-name "~/devtools/emacs/site-lisp/html-helper-mode-2.19.1.1"))

(add-to-list 'load-path (expand-file-name "~/devtools/emacs/site-lisp/psgml-1.3.1/"))
(add-to-list 'load-path (expand-file-name "~/devtools/emacs/site-lisp/xae-1.0beta8/lisp"))

(load-file (expand-file-name "~/devtools/emacs/site-lisp/revbufs.el"))

;;(autoload 'js2-mode "js2" nil t)
;;(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))

(setq semanticdb-default-save-directory "~/.semantic.cache")

;;(require 'printing)
;;(pr-update-menus t)

;;(require 'ido)


;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-
;;; Custom variables -- EDIT AT YOUR OWN RISK...
;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(auto-revert-verbose nil)
 '(case-fold-search t)
 '(current-language-environment "Latin-1")
 '(default-input-method "latin-1-prefix")
 '(ecb-before-activate-hook (quote (amiller-ecb-before-activate-hook)))
 '(ecb-deactivate-hook (quote (amiller-ecb-deactivate-hook)))
 '(ecb-history-make-buckets (quote directory))
 '(ecb-kill-buffer-clears-history (quote auto))
 '(ecb-layout-name "amiller-left-analysis")
 '(ecb-layout-window-sizes nil)
 '(ecb-non-semantic-exclude-modes (quote (sh-mode fundamental-mode text-mode nxml-mode)))
 '(ecb-options-version "2.40")
 '(ecb-run-ediff-in-ecb-frame t)
 '(ecb-show-sources-in-directories-buffer (quote always))
 '(ecb-source-file-regexps (quote ((".*" ("\\(^\\(\\.\\|#\\)\\|\\(~$\\|\\.\\(elc\\|obj\\|o\\|class\\|lib\\|dll\\|a\\|so\\|cache\\|png\\|gif\\|DS_Store\\|jpg\\|psp\\|Icon
\\)$\\)\\)") ("^\\.\\(emacs\\|gnus\\|ruler\\|aliases\\|profile\\|inputrc\\|Xdefaults\\|classpath\\|project\\|.*\\.el\\)$")))))
 '(ecb-source-path (quote (("~/github/onetribeyoyo/mtm/" "~/github/onetribeyoyo/mtm") ("~/github/onetribeyoyo/" "~/github/onetribeyoyo/") ("~/dev/scratch/" "~/dev/scratch") ("~/dev/" "~/dev") ("~" "~"))))
 '(ecb-tip-of-the-day nil)
 '(ecb-tree-buffer-style (quote ascii-no-guides))
 '(ecb-tree-indent 2)
 '(ecb-vc-enable-support t)
 '(ecb-wget-setup (quote cons))
 '(font-lock-support-mode (quote jit-lock-mode))
 '(ido-enable-flex-matching t)
 '(indent-tabs-mode nil)
 '(initial-scratch-message nil)
 '(ispell-program-name "aspell" t)
 '(jde-ant-home "$ANT_HOME")
 '(jde-build-function (quote (jde-ant-build)))
 '(jde-checkstyle-style "~/etc/checkstyle.xml")
 '(jde-compile-option-debug (quote ("all" (t nil nil))))
 '(jde-compile-option-deprecation t)
 '(jde-compile-option-hide-classpath t)
 '(jde-compiler (quote ("javac" "")))
 '(jde-db-active-breakpoint-face-colors (quote ("black" . "red")))
 '(jde-db-requested-breakpoint-face-colors (quote ("black" . "tomato")))
 '(jde-db-spec-breakpoint-face-colors (quote ("black" . "orange red")))
 '(jde-debugger (quote ("JDEbug")))
 '(jde-jdk (quote ("1.6.0")))
 '(jde-jdk-doc-url "/app/jdk-1.5.0_09/docs")
 '(jde-jdk-registry (quote (("1.5.0" . "/System/Library/Frameworks/JavaVM.framework/Versions/1.5.0") ("1.4.2" . "/System/Library/Frameworks/JavaVM.framework/Versions/1.4.2") ("1.6.0" . "/System/Library/Frameworks/JavaVM.framework/Versions/1.6.0"))))
 '(jde-project-context-switching-enabled-p t)
 '(paren-glint-timeout 10)
 '(paren-match-face (quote paren-face-match-light))
 '(paren-sexp-mode t)
 '(printer-name nil)
 '(ps-bottom-margin 25)
 '(ps-inter-column 35)
 '(ps-landscape-mode nil)
 '(ps-left-margin 35)
 '(ps-line-number t)
 '(ps-number-of-columns 1)
 '(ps-print-color-p t)
 '(ps-printer-name nil)
 '(ps-right-margin 25)
 '(ps-top-margin 25)
 '(ps-zebra-stripe-height 3)
 '(ps-zebra-stripes t)
 '(safe-local-variable-values (quote ((nxml-child-indent . 2))))
 '(search-whitespace-regexp nil) ;; I don't like the lax/fuzzy matching!
 '(show-paren-mode t nil (paren))
 '(text-mode-hook (quote (turn-on-auto-fill text-mode-hook-identify)))
 '(truncate-partial-width-windows nil)
 )

(require 'paren-glint)
(paren-glint-mode 1)

;;'(jde-checkstyle-style "~/etc/checkstyle.xml")
;;'(jde-checkstyle-style "/app/devAPM-r20/util/checkstyle/conf/checkstyle.xml")

;; '(jde-debugger (quote ("JDEbug")))

;;
;; About IP printers and cygwin/windows...
;;
;; The printer-name variable must be set to a valid UNC.  You can't use a
;; port.  So to use an IP printer you'll have to share it first and give it a
;; name.
;;
;; '(printer-name "//stpprn02/GDT843709P")
;; '(printer-name "//stpprn02/GDT844020P")
;; '(ps-line-number-step (quote zebra))



;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-
;; Postscript printing
;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-
;;
;; defaults
(setq ps-font-size 9
      ps-header-font-size 8
      ps-header-title-font-size 8
      ;;ps-header-lines 1 ;; only use the filename and page number
      ps-header-offset 18 ;; margin between header and text in 72nds of an inch
      ps-left-margin 36   ;; left margin in 72nds
      ps-right-margin 36  ;; right margin in 72nds
      )

;; Simple print buffer command
;;
(defun sprint-buffer ()
  "Output a postscript file using the defaults."
  (interactive)
  (ps-print-buffer "~/temp.ps")
  (shell-command "open /Applications/Preview.app ~/temp.ps")
  )

;; Simple print region command
;;
(defun sprint-region ()
  "Output a postscript file using the defaults."
  (interactive)
  (ps-print-region (mark) (point) "~/temp.ps")
  (shell-command "open /Applications/Preview.app ~/temp.ps"))

;; Setup the postscript settings
;;
(defun sprint-setup (use-headers use-line-numbers use-landscape)
  (interactive
   (list (y-or-n-p "Headers?")
         (y-or-n-p "Line numbers?")
         (y-or-n-p "Landscape?")))
  (setq ps-print-headers use-headers)
  (setq ps-line-number use-line-numbers)
  (setq ps-landscape-mode use-landscape)
  )


;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-
;;; Buffer and frame setup, etc...
;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-

;;(menu-bar-mode -1) ;; leave the menu bar visible
(tool-bar-mode -1) ;; hide the tool bar

;;(standard-display-european t)         ; Allow extended character set
(setq frame-title-format
      ;;(concat "Emacs [" emacs-version "] - %b - %f")
      (concat "Emacs [" emacs-version "] - %f")
      )
(setq scroll-step                   1
      backup-by-copying-when-linked t
      require-final-newline         t
      mail-self-blind               t
      inhibit-startup-message       t
      blink-matching-paren          t
      line-number-mode              t
      column-number-mode            t
      )

(put 'eval-expression 'disabled nil)
(put 'narrow-to-region 'disabled nil)

(global-set-key "" nil)

(load "completion.elc")
(add-to-list 'completion-ignored-extensions ".DS_Store")
(initialize-completions)
(setq *print-next-completion-does-cdabbrev-search-p* t)

;;(global-set-key "." 'tags-search)
;;(global-set-key "," 'tags-loop-continue)

(global-set-key "t" 'transpose-windows)
(fset 'transpose-windows
      "b
ob
ob
")

(global-set-key "p" 'reposition-window)

(global-set-key "4" 'quarter-window-split)
(defun quarter-window-split ()
  (interactive)
  (split-window-vertically -18)
  )

(defun just-one-space-with-newline ()
  "Call just-one-space with a negative argument"
  (interactive)
  (just-one-space -1))
(global-set-key (kbd "M-1")     'just-one-space-with-newline)


;; file encoding conversion
(defun set2mac ()
  (interactive)
  (set-buffer-file-coding-system 'undecided-mac)
  (save-buffer))
(defun set2unix ()
  (interactive)
  (set-buffer-file-coding-system 'undecided-unix)
  (save-buffer))
(defun set2dos ()
  (interactive)
  (set-buffer-file-coding-system 'undecided-dos)
  (save-buffer))

;;(require 'highlight-completion)
;;(highlight-completion-mode 1)

(require 'browse-kill-ring)
(global-set-key (kbd "C-c k") 'browse-kill-ring)

(autoload 'nuke-trailing-whitespace "whitespace" nil t)
(add-hook 'write-file-hooks 'nuke-trailing-whitespace)


;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-
;;; MacOSX details...
;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-

(load-file "~/.emacs.osx.frame-size.el")

;; force Command to be the Meta key!
(setq mac-option-key-is-meta    nil
      mac-command-key-is-meta     t
      mac-command-modifier    'meta
      mac-option-modifier       nil
      )

;; set the Option key as Super
(setq mac-option-modifier 'super)

;; I like to use a single frame
(setq ns-pop-up-frames nil)


;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-
;;; Column width...
;;; ----10--------20--------30--------40--------50--------60--------70--------80--------90-------100-------110-------120-------130--

(setq-default fill-column 72)
;;(setq-default fill-column 77)
;;(setq-default fill-column 80)
;;(setq-default fill-column 90)
;;(setq-default fill-column 132)

;; Wide column mode changes the cursor colour when it gets past the fill-column.
;; There's some bug in this that can get the curson colour out of wack.
;;(require 'wide-column)
;;(global-wide-column-mode)

;;(require 'margin)
;;(margin-mode)

(require 'vvb-mode)
;; My personal preference is 85, but I change it from time to time to help satisfy client coding conventions.
(setq-default vvb-column         112
              vvb-sticky-p       nil
              vvb-permanent-p    t
              vvb-horizontal-p   nil
              vvb-right-on-eol-p t
              )
;; face colour is set in colors section below.

(defun turn-on-vvb-mode ()
  "Unconditionally turn on Visible Vertical Bar mode."
  (vvb-mode nil))
(defun turn-off-vvb-mode ()
  "Unconditionally turn off Visible Vertical Bar mode."
  (vvb-mode -1))

;;(setq-default vvb-mode 1)
(add-hook 'emacs-lisp-mode-hook    'turn-on-vvb-mode)
(add-hook 'jde-mode-hook           'turn-on-vvb-mode)
;;(add-hook 'text-mode-hook          'turn-on-vvb-mode)
(add-hook 'shell-script-mode-hook  'turn-on-vvb-mode)


;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-
;;; Colors and font lock...
;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-

;;; font-lock is empirically fastest when I just leave all this alone!
(global-font-lock-mode 1)
;;(setq font-lock-support-mode 'jit-lock-mode)
;;(setq font-lock-support-mode fast-lock-mode)
;;setq font-lock-support-mode 'lazy-lock-mode)
;;setq font-lock-maximum-decoration t)

;;(list-colors-display)
;;(set-background-color "beige")
;;(set-face-background vvb-face "linen")
;;(set-face-background vvb-face "misty rose")
;;(set-face-background vvb-face "cornsilk")

(load-file "~/.emacs.theme.nightvision.el")

(require 'color-theme)


;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-
;;; Misc...
;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-
(setq paren-face 'bold)
(setq paren-highlight-offscreen t)

(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)

(defun un-camelcase-word-at-point ()
  "un-camelcase the words in the region, replacing uppercase
   chars with the lowercase version preceded by an underscore.
   The first char, if capitalized (eg, PascalCase) is just
   downcased, no preceding underscore."
  (interactive)
  (save-excursion
    (let ((bounds (bounds-of-thing-at-point 'word)))
      (replace-regexp "\\([A-Z]\\)" "_\\1" nil
                      (1+ (car bounds)) (cdr bounds))
      (downcase-region (car bounds) (cdr bounds))
      )
    )
  )
(global-set-key (kbd "M-_") 'un-camelcase-word-at-point)

(defun simplify-characters-in-buffer ()
  "swaps extended characters for lower ascii alternatives."
  (interactive)
  ;; do replacements across the entire buffer of...
  ;; @see etc/char-list.el
  )

;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-
;;; Modes...
;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-

;;(add-to-list 'auto-mode-alist '("\\.[Cc][Ss][Vv]\\'" . csv-mode))
;;(autoload 'csv-mode "csv-mode" "Major mode for editing comma-separated value files." t)

(add-to-list 'auto-mode-alist '("\\.rrp" . perl-mode))
(add-to-list 'auto-mode-alist '("\\.shlib" . shell-script-mode))

;;(require 'vc-hooks)
(require 'vc-hg)
(setq hg-with-rainbow-decoration nil)
(defun vc-hg-annotate-command (file buffer &optional revision)
  "Execute \"hg annotate\" on FILE, inserting the contents in BUFFER.  Optional arg REVISION is a revision to annotate from."
  (if hg-with-rainbow-decoration
      (vc-hg-command buffer 0 file "annotate"
                     ;; default args were -d -n --follow
                     "-d"
                     "-n"
                     ;;"--follow" ;; full pathname
                     ;;"-l"       ;; show line number
                     (when revision (concat "-r" revision))
                     )
    (vc-hg-command buffer 0 file "annotate"
                   "-d"
                   "-n"
                   "-u" ;; list the author, THIS BREAKS THE RAINBOW COLORIZATION !
                   "-q" ;; short date stamp, THIS BREAKS THE RAINBOW COLORIZATION !
                   (when revision (concat "-r" revision))
                   )
    )
  )
(defun hg-toggle-rainbow ()
  (interactive)
  (setq hg-with-rainbow-decoration (not hg-with-rainbow-decoration))
  ;; how do I force a re-render?
  ;;(vc-annotate-prev-revision)
  ;;(vc-annotate-next-revision)
  )

;(defconst vc-hg-annotate-re
;  ;; original regex...
;  "^[ \t]*\\([0-9]+\\) \\(.\\{30\\}\\)\\(?:\\(: \\)\\|\\(?: +\\(.+\\): \\)\\)"
;  ;; a new RE that matches my annotate args...
;  ;;"^.+[ ^t]*\\([0-9]+\\)[ ^t]*\\([0-9]{4}-[0-9]{2}-[0-9]{2}\\)\\(?:\\(: \\)\\|\\(?: +\\(.+\\): \\)\\)"
;  )
;
;(defun vc-hg-annotate-time ()
;  (when (looking-at vc-hg-annotate-re)
;    (goto-char (match-end 0))
;    (vc-annotate-convert-time
;     (date-to-time (match-string-no-properties 2)))))
;
;(defun vc-hg-annotate-extract-revision-at-line ()
;  (save-excursion
;    (beginning-of-line)
;    (when (looking-at vc-hg-annotate-re)
;      (if (match-beginning 3)
;	  (match-string-no-properties 1)
;	(cons (match-string-no-properties 1)
;	      (expand-file-name (match-string-no-properties 4)
;				(vc-hg-root default-directory)))))))

(require 'vc-git)
(defun vc-git-annotate-command (file buf &optional rev)
  (let ((name (file-relative-name file)))
    (vc-git-command buf 'async nil "blame"
                    ;; default args were "--date=iso" "-C" "-C" rev "--" name
                    "--date=iso" "-C" "-C" rev "--" name
                    ;;"--date=iso" rev "--" name
                    ;;"--date=iso" rev "-c" "--" name
                    )
    )
  )


;; Text mode
(setq initial-major-mode 'text-mode)    ; start out in text mode
(setq default-major-mode 'text-mode)    ; default to text mode
(add-hook 'text-mode-hook 'turn-on-auto-fill)

;; CSS mode
(add-to-list 'auto-mode-alist '("\\.css" . css-mode))
(add-to-list 'auto-mode-alist '("\\.less" . css-mode))
(autoload 'css-mode "css-mode" nil t)

;; go mode
(require 'go-mode-autoloads)1

;; SQL mode
(add-to-list 'auto-mode-alist '("\\.ddl" . sql-mode))
(defun amiller-sql-mode-hook ()
  (setq tab-width 2)
  )
(add-hook 'sql-mode-hook 'amiller-sql-mode-hook)
(add-hook 'sql-mode-hook 'turn-on-vvb-mode)

;; Shell scripts
(add-to-list 'auto-mode-alist '("\\.profile" . shell-script-mode))
(add-to-list 'auto-mode-alist '("\\.aliases" . shell-script-mode))

;; COBOL mode
(require 'cobol-mode)
(add-to-list 'auto-mode-alist '("\\.cob" . cobol-mode))
(add-to-list 'auto-mode-alist '("\\.cob0l" . cobol-mode))

;; PowerBuilder mode
(add-to-list 'load-path (expand-file-name "~/devtools/emacs/site-lisp/powerbuilder-mode"))
(require 'powerbuilder-mode)
(add-to-list 'auto-mode-alist '("\\.pbl" . powerbuilder-mode))

;; YAML mode
(add-to-list 'load-path (expand-file-name "~/devtools/emacs/site-lisp/yaml-mode"))
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))


;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-
;;; SGML and XML
;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-

;; nXml mode
(add-to-list 'auto-mode-alist '("\\.jsp"  . nxml-mode))
(add-to-list 'auto-mode-alist '("\\.gsp"  . nxml-mode))
(add-to-list 'auto-mode-alist '("\\.html" . nxml-mode))
(add-to-list 'auto-mode-alist '("\\.htm"  . nxml-mode))

(defun amiller-nxml-mode-hook ()
  (setq nxml-child-indent   2
        fill-column       120
        )
  (turn-on-auto-fill)
  )
(add-hook 'nxml-mode-hook 'amiller-nxml-mode-hook)
(add-hook 'nxml-mode-hook 'turn-on-vvb-mode)


;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-
;;; Groovy Development...
;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-

;;(add-to-list 'load-path (expand-file-name "~/devtools/emacs/emacs.groovy/groovy-mode-by-jeremy-rayner"))
;;(add-to-list 'load-path (expand-file-name "~/devtools/emacs/emacs.groovy"))
;;(add-to-list 'load-path (expand-file-name "~/devtools/emacs/emacs.groovy/wolfmanjm-grails-mode-eee23a6"))

;;(add-to-list 'load-path (expand-file-name "~/devtools/emacs/emacs.groovy/groovy-mode-by-russel-winder"))
(add-to-list 'load-path (expand-file-name "~/devtools/emacs/emacs.groovy/emacs-groovy-mode_201311291207"))

;; make Groovy mode electric by default.
;;(add-hook 'groovy-mode-hook '(lambda () (require 'groovy-electric) (groovy-electric-mode)) )

;;; use groovy-mode when file ends in .groovy or has #!/bin/groovy at start
(autoload 'groovy-mode "groovy-mode" "Major mode for editing Groovy code." t)
(add-to-list 'auto-mode-alist '("\.groovy$" . groovy-mode))
(add-to-list 'auto-mode-alist '("\.gradle$" . groovy-mode))
(add-to-list 'interpreter-mode-alist '("groovy" . groovy-mode))

;;; make Groovy mode electric by default.
;;(add-hook 'groovy-mode-hook
;;          '(lambda ()
;;             (require 'groovy-electric)
;;             (groovy-electric-mode)
;;               )
;;)

(defun amiller-groovy-mode-hook ()
  (setq indent-tabs-mode nil          ; Use spaces instead of tabs.
        tab-width          4
        c-basic-offset     4
        fill-column      110
        )
  )
(add-hook 'groovy-mode-hook 'amiller-groovy-mode-hook)


;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-
;;; ECB...
;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-

(require 'ecb-autoloads)

(defun amiller-ecb-before-activate-hook ()
  "Enlarges the frame size while preserving the size of the edit pane."
  (set-frame-position (selected-frame) amiller-ecb-frame-left amiller-frame-top)
  (set-frame-width    (selected-frame) amiller-ecb-frame-width)
  t
  )
(defun amiller-ecb-deactivate-hook ()
  "Resets the frame size."
  (set-frame-width    (selected-frame) amiller-frame-width)
  (set-frame-position (selected-frame) amiller-frame-left amiller-frame-top)
  t
  )

(defun ecb-reactivate ()
  (interactive)
  (ecb-deactivate)
  (ecb-activate) )


;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-
;;; Java Development...
;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-

(add-to-list 'completion-ignored-extensions ".class") ; Ignore compiled java class files.
(add-to-list 'completion-ignored-extensions "vssver.scc") ; Ignore VSS turds.

;; Ignore TCC diagram stuff.
(add-to-list 'completion-ignored-extensions ".dfPackage")
(add-to-list 'completion-ignored-extensions ".dfSequence")

(global-set-key "c" 'insert-java-class-template)

(setq amiller-java-template-choice 'amiller)
(defun insert-java-class-template ()
  "Insert the java class template at point."
  (interactive)
  (push-mark)
  (cond
   ((eq amiller-java-template-choice 'amiller)    (insert-file "~/etc/class-template.amiller.java"))
   (t                                             (insert-file "~/etc/class-template.java"))
   )
  )

(require 'jde)
(require 'jde-bug)
(defun amiller-jde-mode-hook ()
  ;; Intendation is based on the GNU style (differences are noted.)
  (setq c-basic-offset                  4)
  (setq c-comment-only-line-offset      '(0 . 0))
  (c-set-offset 'statement-block-intro  '+)
  (c-set-offset 'knr-argdecl-intro      5)
  (c-set-offset 'substatement-open      0) ; gnu specifies '+
  (c-set-offset 'label                  0)
  (c-set-offset 'statement-case-open    '+)
  (c-set-offset 'statement-cont         '+)
  (c-set-offset 'arglist-intro          'c-lineup-arglist-intro-after-paren)
  (c-set-offset 'arglist-close          'c-lineup-arglist)
  (c-set-offset 'inline-open            0)
  (c-set-offset 'brace-list-open        '+)
  (setq c-block-comment-prefix          "")

  ;;(setq compile-command "javac ")
  ;;(setq compile-command (concat "jikes " buffer-file-name))
  (setq case-fold-search    t
        comment-column     44
        indent-tabs-mode  nil           ; Use spaces instead of tabs.
        c-auto-newline    nil
        )

  (setq fill-column 110)

  (show-paren-mode)

  ;;(local-set-key "\^c\^v\^p"    'jde-run-set-app-args) ;app parameters
  ;;(local-set-key "\^c\^v\^v"    'jde-run-set-args) ;vm parameters
  ;;(local-set-key "\^c\^v\^o"    'jde-set-compile-options) ;compiler arguments
  )
(add-hook 'jde-mode-hook 'amiller-jde-mode-hook)
(add-hook 'jde-mode-hook 'turn-on-vvb-mode)

(defun amiller-compilation-mode-hook ()
  ;; Number of lines in a compilation window.  If nil, use Emacs default.
  (setq compilation-window-height 17)
  )
(add-hook 'compilation-mode-hook 'amiller-compilation-mode-hook)

;; This removes unsightly ^M characters that would otherwise appear in
;; the output of java applications.
(add-hook 'comint-output-filter-functions
          'comint-strip-ctrl-m)


;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-
;;; Code folding...
;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-

(autoload 'hideshowvis-enable "hideshowvis" "Highlight foldable regions")

(autoload 'hideshowvis-minor-mode
  "hideshowvis"
  "Will indicate regions foldable with hideshow in the fringe."
  'interactive)

;;(dolist (hook (list 'emacs-lisp-mode-hook
;;                    'c++-mode-hook))
;;  (add-hook hook 'hideshowvis-enable))

(add-hook 'css-mode-hook          'hideshowvis-enable)
(add-hook 'emacs-lisp-mode-hook   'hideshowvis-enable)
(add-hook 'groovy-mode-hook       'hideshowvis-enable)
(add-hook 'html-helper-mode-hook  'hideshowvis-enable)
(add-hook 'html-mode-hook         'hideshowvis-enable)
(add-hook 'java-mode-hook         'hideshowvis-enable)
(add-hook 'javascript-mode-hook   'hideshowvis-enable)
;;(add-hook 'jde-mode-hook          'hideshowvis-enable)
(add-hook 'markdown-mode-hook     'hideshowvis-enable)
(add-hook 'nxml-mode-hook         'hideshowvis-enable)
(add-hook 'perl-mode-hook         'hideshowvis-enable)
(add-hook 'sgml-mode-hook         'hideshowvis-enable)
(add-hook 'shell-script-mode-hook 'hideshowvis-enable)
(add-hook 'sql-mode-hook          'hideshowvis-enable)
(add-hook 'text-mode-hook         'hideshowvis-enable)
(add-hook 'xml-mode-hook          'hideshowvis-enable)

(setq hideshowvis-fancy-decorations-enable t)
(cond (hideshowvis-fancy-decorations-enable
       (define-fringe-bitmap 'hs-marker [0 24 24 126 126 24 24 0])

       (defcustom hs-fringe-face 'hs-fringe-face
         "*Specify face used to highlight the fringe on hidden regions."
         :type 'face
         :group 'hideshow)

       (defface hs-fringe-face
         '((t (:foreground "HotPink4" :background "HotPink4" :box (:line-width 2 :color "HotPink4" :style released-button))))
         "Face used to highlight the fringe on folded regions"
         :group 'hideshow)

       (defcustom hs-face 'hs-face
         "*Specify the face to to use for the hidden region indicator"
         :type 'face
         :group 'hideshow)

       (defface hs-face
         '((t (:background "#ff8" :foreground "black" :box t)))
         "Face to hightlight the ... area of hidden regions"
         :group 'hideshow)

       (defun display-code-line-counts (ov)
         (when (eq 'code (overlay-get ov 'hs))
           (let* ((marker-string "*fringe-dummy*")
                  (marker-length (length marker-string))
                  (display-string (format "(%d)..." (count-lines (overlay-start ov) (overlay-end ov))))
                  )
             (overlay-put ov 'help-echo "Hiddent text. C-c,= to show")
             (put-text-property 0 marker-length 'display (list 'left-fringe 'hs-marker 'hs-fringe-face) marker-string)
             (overlay-put ov 'before-string marker-string)
             (put-text-property 0 (length display-string) 'face 'hs-face display-string)
             (overlay-put ov 'display display-string)
             )))

       (setq hs-set-up-overlay 'display-code-line-counts)
       )
      )


;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-
;;; lilypond...
;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-

(add-to-list 'load-path (expand-file-name "~/devtools/emacs/site-lisp/lilypond"))

(autoload 'LilyPond-mode "lilypond-mode")
(setq auto-mode-alist
      (cons '("\\.ly$" . LilyPond-mode) auto-mode-alist))

(add-hook 'LilyPond-mode-hook (lambda () (turn-on-font-lock)))


;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-
;;; markdown...
;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-

(autoload 'markdown-mode "markdown-mode" "Major mode for editing Markdown files" t)
;;(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

(defun amiller-markdown-mode-hook ()
  (setq fill-column 102)
  )
(add-hook 'markdown-mode-hook 'amiller-markdown-mode-hook)

;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-
;;; Signatures...
;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-

(global-set-key "z" 'insert-long-signature)
(defun insert-long-signature ()
  "Inserts the contents of ~/etc/signature into the current buffer."
  (interactive)
  (push-mark)
  (insert-file "~/etc/signature")
  )


(global-set-key "=" 'insert-short-signature)
(defun insert-short-signature ()
  "Insert username, date and time at point."
  (interactive)
  (push-mark)
  ;;(insert (concat "[" (user-login-name) " - " (current-time-string) "]"))
  ;;(insert (concat "[amiller - " (current-time-string) "]"))
  ;;(insert (concat " // TODO: amiller " (format-time-string "%Y/%m/%d %H:%M") " - "))
  (insert (concat " // TODO: amiller " (format-time-string "%Y/%m/%d") " - "))
  ;;(insert " // TODO: amiller - ")
  (newline)
  )


;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-
;;; editorconfig...
;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-

;(add-to-list 'load-path (expand-file-name "~/devtools/emacs/site-lisp/editorconfig-emacs-master"))
;(require 'editorconfig)
;(editorconfig-mode 1)


;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-
;;; Startup...
;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-

(ecb-activate)


;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-
;;; End of safe emacs init file.
;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-


;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-
;;; Expirimental section...
;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-

;(defun indent-or-complete ()
;  "Complete if point is at end of a word, otherwise indent line."
;  (interactive)
;  (if (looking-at "\\>")
;      (dabbrev-expand nil)
;    (indent-for-tab-command)
;    )
;  )
;(add-hook 'html-helper-mode-hook
;          (function (lambda ()
;                      (local-set-key (kbd "<tab>") 'indent-or-complete)
;                      )
;                    )
;          )


;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-
;;; Frame and font manipulation.
;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-

;;; start emacs maximized put this line at the end of your .emacs file:
;;(w32-send-sys-command 61488)

;;; Frame size manipulation.
(defun maximize-frame ()
  (interactive)
  (set-frame-parameter nil 'fullscreen
                       (if (frame-parameter nil 'fullscreen) nil
                         'fullboth)))
;;(maximize-frame)
(global-set-key [(meta return)] 'maximize-frame)


(defun font-big ()
  (interactive)
  (set-default-font "-apple-Inconsolata-medium-normal-normal-*-26-*-*-*-m-0-iso10646-1")
  )
(defun font-medium ()
  (interactive)
  (set-default-font "-apple-Inconsolata-medium-normal-normal-*-18-*-*-*-m-0-iso10646-1")
  )
(defun font-normal ()
  (interactive)
  (set-default-font "-apple-Inconsolata-medium-normal-normal-*-14-*-*-*-m-0-iso10646-1")
  )


;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-

(setq default-directory "~/")


;;; -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-
;;; END OF FILE
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(diff-added ((t (:foreground "orange" :bold nil :italic nil))))
 '(diff-removed ((t (:foreground "LavenderBlush4" :bold nil :italic t))))
 '(ecb-default-general-face ((((class color) (background dark)) (:height 0.95 :bold nil))))
 '(ecb-default-highlight-face ((default nil) (nil (:foreground "plum2" :bold nil))))
 '(ecb-history-bucket-node-dir-soure-path-face ((t (:foreground "RosyBrown" :height 0.95 :bold nil))))
 '(font-lock-builtin-face ((t (:foreground "gray94" :bold nil :italic nil))))
 '(font-lock-comment-face ((t (:foreground "PaleGreen3" :bold nil :italic t))))
 '(font-lock-doc-face ((t (:foreground "PaleGreen3" :bold nil :italic t))))
 '(font-lock-function-name-face ((t (:foreground "LightGoldenrod1" :bold nil :italic nil))))
 '(font-lock-keyword-face ((t (:foreground "gray94" :bold nil :italic nil))))
 '(font-lock-reference-face ((t (:foreground "yellow" :bold nil :italic nil))))
 '(font-lock-string-face ((t (:foreground "yellow" :bold nil :italic nil))))
 '(font-lock-type-face ((t (:foreground "LightGoldenrod1" :bold t :italic nil))))
 '(font-lock-variable-name-face ((t (:foreground "LightGoldenrod1" :bold t :italic nil))))
 '(jde-java-font-lock-code-face ((t (:bold nil))))
 '(jde-java-font-lock-constant-face ((t (:foreground "yellow" :bold nil :italic nil))))
 '(jde-java-font-lock-doc-tag-face ((t (:foreground "PaleGreen2" :bold nil :italic t :underline nil))))
 '(jde-java-font-lock-link-face ((t (:foreground "PaleGreen2" :bold nil :italic t :underline t))))
 '(jde-java-font-lock-modifier-face ((t (:foreground "gray94" :bold nil :italic nil))))
 '(jde-java-font-lock-number-face ((t (:foreground "yellow" :bold t :italic nil))))
 '(jde-java-font-lock-package-face ((t (:foreground "LightGoldenrod1" :bold t :italic nil))))
 '(jde-java-font-lock-pre-face ((t (:foreground "PaleGreen4" :bold t :italic nil :underline nil))))
 '(jde-java-font-lock-private-face ((t (:foreground "khaki" :bold nil :italic nil))))
 '(jde-java-font-lock-protected-face ((t (:foreground "khaki" :bold nil :italic nil))))
 '(jde-java-font-lock-public-face ((t (:foreground "khaki" :bold nil :italic nil)))))
