
# SUPRESS MESSAGES about the default shell!!!!
export BASH_SILENCE_DEPRECATION_WARNING=1

# -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-
# Prompts and titles...
# -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-

function parse_vc_branch() {

    # cat CVS/tag 2> /dev/null | awk '{ printf "(cvs:%s)", $1 }'
    # git branch  2> /dev/null | grep \* | awk '{ printf "(git:%s)", $2 }'
    # hg branch   2> /dev/null | awk '{ printf "(hg:%s)", $1 }'
    # svn info    2> /dev/null | grep Relative\ URL | awk '{ print $3 }' | awk -F/ '{ printf "(svn:%s/%s)", $2, $3 }'

    git branch > /dev/null 2> /dev/null
    if [ $? -eq 0 ]; then
        git branch 2> /dev/null | grep \* | awk '{ printf "(git:%s) ", $2 }'
        exit 1
    fi

    #hg branch > /dev/null 2> /dev/null
    #if [ $? -eq 0 ]; then
    #    hg branch  2> /dev/null | awk '{ printf "(hg:%s) ", $1 }'
    #    exit 1
    #fi

    #svn info > /dev/null 2> /dev/null
    #if [ $? -eq 0 ]; then
    #    svn info   2> /dev/null | grep Relative\ URL | awk '{ print $3 }' | awk -F/ '{ printf "(svn:%s/%s) ", $2, $3 }'
    #    exit 1
    #fi

    #if [ -f CVS/Root ] ; then
    #    if [ -f CVS/tag ] ; then
    #        cat CVS/tag 2> /dev/null | awk '{ printf "(cvs:%s) ", $1 }'
    #    else
    #        echo -n "(cvs:--)"
    #    fi
    #    exit 1
    #fi

    # else no vc info will be displayed in the prompt
}

function prompt() {
    local NO_COLOUR="\[\033[0m\]"

    local BLACK="\[\033[0;30m\]"
    local BLUE="\[\033[0;34m\]"
    local BROWN="\[\033[0;33m\]"
    local CYAN="\[\033[0;36m\]"
    local DARK_GRAY="\[\033[1;30m\]"
    local GREEN="\[\033[0;32m\]"
    local LIGHT_BLUE="\[\033[1;34m\]"
    local LIGHT_CYAN="\[\033[1;36m\]"
    local LIGHT_GRAY="\[\033[0;37m\]"
    local LIGHT_GREEN="\[\033[1;32m\]"
    local LIGHT_PURPLE="\[\033[1;35m\]"
    local LIGHT_RED="\[\033[1;31m\]"
    local PURPLE="\[\033[0;35m\]"
    local RED="\[\033[0;31m\]"
    local WHITE="\[\033[1;37m\]"
    local YELLOW="\[\033[1;33m\]"

    if [ -n "$1" ] ; then
        # show all the colours...
        export PS1="$BLACK black $DARK_GRAY dark_gray $BLUE blue $LIGHT_BLUE light_blue $GREEN green $LIGHT_GREEN light_green \
$CYAN cyan $LIGHT_CYAN light_cyan $RED red $LIGHT_RED light_red $PURPLE purple $LIGHT_PURPLE light_purple $BROWN brown \
$YELLOW yellow $LIGHT_GRAY light_gray $WHITE white $NO_COLOUR"
    else
        #export PS1="\n$HOSTNAME:\w[\!]> "
        #export PS1="\n\w\n$USERNAME:$HOSTNAME:[\!]> "
        #export PS1="\n$USER:\w\n$HOSTNAME[\!]> "
        #export PS1="\n\w \$(parse_vc_branch)\n$USER@$HOSTNAME[\!]> "

        # example: amiller@yaal.local:~/github/onetribeyoyo/mtm/src (git:master) [502]>
        #export PS1="\n$DARK_GRAY$USER@$HOSTNAME:\w $CYAN\$(parse_vc_branch)$DARK_GRAY[\!]>$NO_COLOUR "

        # good colours...
        #export PS1="\n$LIGHT_BLUE$USER$CYAN@$LIGHT_BLUE$HOSTNAME$CYAN:$LIGHT_BLUE\w $CYAN\$(parse_vc_branch)$BROWN[\!]>$NO_COLOUR "

        # better colours...
        #export PS1="\n$LIGHT_PURPLE$USER$CYAN@$LIGHT_PURPLE$HOSTNAME$CYAN: $BROWN\w $CYAN\$(parse_vc_branch)$BROWN[\!]>$NO_COLOUR "
        #export PS1="\n$BROWN\w $CYAN\$(parse_vc_branch)$BROWN[\!]>$NO_COLOUR "

        # example:
        #(git:develop)
        #~/path/to/git/repo[503]>
        export PS1="\n$CYAN\$(parse_vc_branch)\n$BROWN\w$BROWN[\!]>$NO_COLOUR "

        #export PS3="Please select one of the options: "
        #export PS4="+ $0:$LINENO "
    fi
}
prompt


# to set the window title...
#function settitle() { echo -n "]0;$@"; }
#function cd() { command cd "$@"; settitle `pwd -P`; }
#settitle `pwd`

#if [ "$TERM_PROGRAM" == "Apple_Terminal" ]
#then
#    export TERM=xterm-256color
#fi


#function elite {
#    local GRAY="\[\033[1;30m\]"
#    local LIGHT_GRAY="\[\033[0;37m\]"
#    local CYAN="\[\033[0;36m\]"
#    local LIGHT_CYAN="\[\033[1;36m\]"
#    local NO_COLOUR="\[\033[0m\]"
#
#    case $TERM in
#        xterm*|rxvt*)
#            local TITLEBAR='\[\033]0;\u@\h:\w\007\]'
#            ;;
#        *)
#            local TITLEBAR=""
#            ;;
#    esac
#
#    local temp=$(tty)
#    local GRAD1=${temp:5}
#    PS1="$TITLEBAR\
#$GRAY-$CYAN-$LIGHT_CYAN(\
#$CYAN\u$GRAY@$CYAN\h\
#$LIGHT_CYAN)$CYAN-$LIGHT_CYAN(\
#$CYAN\#$GRAY/$CYAN$GRAD1\
#$LIGHT_CYAN)$CYAN-$LIGHT_CYAN(\
#$CYAN\$(date +%H%M)$GRAY/$CYAN\$(date +%d-%b-%y)\
#$LIGHT_CYAN)$CYAN-$GRAY-\
#$LIGHT_GRAY\n\
#$GRAY-$CYAN-$LIGHT_CYAN(\
#$CYAN\$$GRAY:$CYAN\w\
#$LIGHT_CYAN)$CYAN-$GRAY-$LIGHT_GRAY "
#    PS2="$LIGHT_CYAN-$CYAN-$GRAY-$NO_COLOUR "
#}


# -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-
# Path and application config.
# -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-

export TMP=~/tmp

#export ANT_HOME=~/devtools/ant/current
#export ANT_OPTS=-Xmx128m
#export ANT_OPTS=-Xmx256m

#export ARTIFACTORY_HOME=~/devtools/artifactory/artifactory-powerpack-3.5.2.1

export GRADLE_HOME=~/devtools/gradle/current
export GRAILS_HOME=~/devtools/grails/current
export GROOVY_HOME=~/devtools/groovy/current

#export JAVA_HOME=`/usr/libexec/java_home -v 1.7`
export JAVA_HOME=`/usr/libexec/java_home -v 1.8`

function use-jdk() {
    VERSION=$1
    jenv shell $VERSION
    if [ $VERSION = "1.6" ] ; then
        export JAVA_HOME=/Library/Java/Home
    else
        export JAVA_HOME=`/usr/libexec/java_home -v $VERSION`
    fi
    echo -n "using java version "
    jenv version
    echo "JAVA_HOME == $JAVA_HOME"
}

# NOTE: Don't know if this will work for OS X 10.8+ but... use the `use` script and add this into the path to switch to older jdk versions
#export JAVA_HOME=~/devtools/jdk/current
#$JAVA_HOME/bin:\

# here are some JAVA_OPTS that optimize gc, but it is preferable to set
# these on a project by project basis.
#export JAVA_OPTS="-XX:PermSize=128m -XX:MaxPermSize=384m -XX:NewSize=256m -Xmx1024m -server -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled"

#export MAVEN_HOME=~/devtools/maven/current
#export M2_HOME=~/devtools/maven/current
#export M2=$M2_HOME/bin

export M3_HOME=~/devtools/maven/current
export M3=$M3_HOME/bin

#export MAVEN_OPTS="-Xmx2100m -Xms512m"

#export MONGO_HOME=~/devtools/mongo/current
export MONGO_HOME=~/local/local-apps/mongodb-3.6.23/

#export RABBITMQ_HOME=~/devtools/rabbitmq/current

#export SQUIRREL_HOME=~/devtools/squirrel-sql/SQuirreLSQL-3.2.1.app/
#alias squirrel=$SQUIRREL_HOME/Contents/MacOS/squirrel-sql.sh

export LOCAL_APPS=~/local/local-apps

#export TOMCAT_HOME=~/devtools/tomcat/current

# path...
export PATH=\
.:\
$HOME/bin:\
$HOME/gravie/bin:\
$MAVEN_HOME/bin:\
$MONGO_HOME/bin:\
/usr/local/bin:\
/usr/local/sbin:\
/Applications/Xcode.app/Contents/Developer/usr/bin:\
$HOME/.config/composer/vendor/couscous/couscous/bin:\
$PATH

function rehome() {
    COMPONENT=$1
    COMPONENT_HOME=`echo ${1}_HOME | tr '[:lower:]' '[:upper:]'`
    LINK_NAME=$2
    NEW_HOME=~/devtools/$COMPONENT/$LINK_NAME

    echo "rehome..."

    echo "   exporting ${COMPONENT_HOME} as $NEW_HOME."
    export $COMPONENT_HOME=$NEW_HOME

    echo "   prepending ${NEW_HOME}/bin to path."
    export PATH=$NEW_HOME/bin:$PATH
}

# -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-


# -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-
# Misc...
# -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-

. .profile.completions


# Don't put duplicate lines in the history...
export HISTCONTROL=ignoredups

# Don't close the shell on Crtl-D...
set -o ignoreeof

# Don't have to hit the <Tab> key twice to produce a list of all completions...
set show-all-if-ambiguous

# ls colors...
#export LSCOLORS=`ls-colours`
export CLICOLOR=1
export LSCOLORS=ExFxCxDxBxegedabagacad
#xport LSCOLORS=dxfxcxdxbxegedabagacad

# grep colors...
export GREP_COLOR='1;31'
export GREP_OPTIONS='--color=auto'

# -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-

#export PATH="$HOME/.jenv/bin:$PATH"
#eval "$(jenv init -)"
#export DOCKER_IP="127.0.0.1"

#export PATH="$HOME/.cargo/bin:$PATH"


#use-jdk 1.8

. .aliases
. .projects
. .gravie


# -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-

# ASDF START
. $(brew --prefix asdf)/asdf.sh
. $(brew --prefix asdf)/etc/bash_completion.d/asdf.bash
# ASDF END

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="/Users/andy.miller/.sdkman"
[[ -s "/Users/andy.miller/.sdkman/bin/sdkman-init.sh" ]] && source "/Users/andy.miller/.sdkman/bin/sdkman-init.sh"

#export NVM_DIR="$HOME/.nvm"
#[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm


# -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-

# Echo some config info at shell startup time
# (useful when debugging the shell environment.)

#ppath
#use
