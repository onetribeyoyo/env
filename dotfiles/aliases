
alias h='history 30'
alias hh='history 5000 | grep'

alias ls="ls -FG"
alias ll='ls -lFh'
alias la='ls -aFh'
alias l='ls -1F'

alias rm='rm -i'
alias mv='mv -i'
alias cp='cp -i'

alias xrm="xargs rm"
alias XRM="xargs rm -rf"

alias t='less'

alias c='clear'


#
# don't want your computer to sleep?
# and can't use https://intelliscapesolutions.com/apps/caffeine?
# try this instead
#
function coffee () {
    HOURS=$1
    if ! [[ "$HOURS" =~ ^[0-9]+$ ]]; then
        echo "ERROR: Specify number of hours as an integer"
    else
        SECONDS=`expr $HOURS \* 3600`
        echo "Caffeinated for $HOURS hours ($SECONDS seconds.)"
        echo "  - prevents the display from sleeping."
        echo "  - prevents the system from idle sleeping."
        echo "  - prevents the system from sleeping when system on AC power."
        caffeinate -d -i -s -t $SECONDS
    fi
}


# colour defs for printf...
export NO_COLOUR="\033[0m"

export BLACK="\033[0;30m"
export BLUE="\033[0;34m"
export BROWN="\033[0;33m"
export CYAN="\033[0;36m"
export DARK_GRAY="\033[1;30m"
export GREEN="\033[0;32m"
export LIGHT_BLUE="\033[1;34m"
export LIGHT_CYAN="\033[1;36m"
export LIGHT_GRAY="\033[0;37m"
export LIGHT_GREEN="\033[1;32m"
export LIGHT_PURPLE="\033[1;35m"
export LIGHT_RED="\033[1;31m"
export PURPLE="\033[0;35m"
export RED="\033[0;31m"
export WHITE="\033[1;37m"
export YELLOW="\033[1;33m"


# how can this automagically pic up term-width?
alias sdiff='sdiff -w 262'


# filters out anything with __?__ in it.
alias cvs_filter='grep -v \/CVS'
alias git_filter='grep -v \/.git'
alias hg_filter='grep -v \/.hg'
alias svn_filter='grep -v \/.svn'
alias vs_filters="cvs_filter | git_filter | hg_filter | svn_filter"
alias node_modules_filter='grep -v \/node_modules'


# quotes spaces in pathnames so other shell commands and scripts don't puke.
# alias quotespaces="sed \'s/ /\\ /g\'"
# don't know why this doesn't work as an alias but works just fine as a script?

alias emacsclean='find . -name \*~ -print | vs_filters | quotespaces | xargs \rm'
alias dsstoreclean='find . -name .DS_Store -print | vs_filters | quotespaces | xargs \rm'
alias vssclean='find . -name vssver.scc -print | vs_filters | quotespaces | xargs \rm'
alias javaclean='find . -name \*.class -print | vs_filters | quotespaces | xargs \rm'
alias srcclean='find ./src ./test/dat/src -name \*.class -print | vs_filters | quotespaces | xargs \rm'
#alias scrub='find . \( -name \*~ -o -name vssver.scc \) -print | vs_filters | quotespaces | xargs \rm'
alias scrub=emacsclean


#alias findw='find . -type f ! \( -perm a=r -o -perm a=rx \) | vs_filters'
#alias findro='find . -type f \( -perm a=r -o -perm a=rx \) | vs_filters'
alias findw='find . -type f -perm +222 | quotespaces'
alias findro='find . -type f ! -perm +222 | quotespaces'
alias purge='findro | vs_filters | xargs rm ; scrub ; rmempty'

alias pme='ps -h -u `id -u`'
alias pthis='pme | grep'

alias files="awk -F: '{print \$1}' | sort | uniq"
alias f="files"
alias packages="awk -F: '{print \$1}'        \
                | xargs grep package\ com\.  \
                | awk -F: '{print \$2}'      \
                | awk '{print \$2}'          \
                | sed 's/\//\./g'            \
                | sed 's/\;//g'              \
                | uniq -c"


# emacs...
function emacs-use-27 () {
  (
    cd ~/local/local-apps
    if [ -L Emacs.app ] ; then
       rm -f Emacs.app
    fi
    ln -s ./Emacs-27.app Emacs.app
  )
}
function emacs-use-nightly () {
  (
    cd ~/local/local-apps
    if [ -L Emacs.app ] ; then
       rm -f Emacs.app
    fi
    ln -s ./Emacs.nightly.app Emacs.app
  )
}
export EMACS_APP=Emacs.app

alias emacs='open -a $EMACS_APP'
alias edit='xargs open -a $EMACS_APP'
alias fedit='files | edit'
alias fe='fedit'

alias chrome='open -a Google\ Chrome'
alias ff='open -a Firefox'
alias safari='open -a Safari'
alias browse=chrome

alias gk='open -a GraphicConverter\ 11'
alias grab='open -a Grab'
alias logseq='open -a Logseq'
alias sgit='open -a SmartGit'
alias slack='open -a Slack'


#
# grep (and recursively grep) for <arg> in files
#
alias gf="find . -maxdepth 1 -type f | grep"
alias ggf="find . -type f ! -name \*class ! -name \*~ | grep"
function ggfe() {
    ggf $@ | fe
}

function findsrc() {
    find . \( \
         -name \*.\[Cch\] -o -name \*.cc -o -name \*.cpp -o \
         -name \*.css -o \
         -name \*.el -o \
         -name \*.groovy -o \
         -name \*.gsp -o \
         -name \*.html -o -name \*.htm -o \
         -name \*.java -o \
         -name \*.js -o \
         -name \*.jsx -o \
         -name \*.json -o \
         -name \*.jsp -o \
         -name \*.kt -o \
         -name \*.lisp -o \
         -name \*.md -o \
         -name \*.pl -o \
         -name \*.properties -o \
         -name \*.py -o \
         -name \*.sql -o -name \*.ddl -o \
         -name \*.ts -o \
         -name \*.tsx -o \
         -name \*.txt -o \
         -name \*.vm -o \
         -name \*.xml -o \
         -name \*.yml -o -name \*.yaml \
         \) \
         -print
}
alias ggsrc="findsrc | quotespaces | xargs grep"

# .c and .h files
alias gc='grep \!* *.[Cch] *.cc *.cpp'
alias ggc='find \( -name \*.\[Cch\] -o -name \*.cc -o -name \*.cpp \) -print | quotespaces | xargs grep \!*'

# .java files
alias gj="find . -maxdepth 1 \( -name \*.java -o -name \*.jsp -o -name \*.properties \) -print | xargs grep"
alias findjava="find . \( -name \*.java \) -print"
alias findclasses="find . -name \*.class -print"
alias ggj="findjava | quotespaces | xargs grep"
alias gjimport="gj import | awk '{print \$2}' | sort | uniq"
alias ggjimport="ggj import | awk '{print \$2}' | sort | uniq"

alias findjsp="find . \( -name \*.jsp \) -print"
alias gjsp="find . -maxdepth 1 -name \*.jsp | xargs grep"
alias ggjsp="findjsp | xargs grep"

alias findpom="find . -name pom.xml -print"
alias ggpom="findpom | xargs grep"

alias gjs="find . -maxdepth 1 -type f -a \( -name \*.js -o -name \*.jsx -o -name \*.ts -o -name \*.tsx \) | xargs grep"
alias findjs="find . -type f -a \( -name \*.js -o -name \*.jsx -o -name \*.ts -o -name \*.tsx \) | node_modules_filter"
alias ggjs="findjs | xargs grep"

alias gjson="find . -maxdepth 1 -name \*.json | xargs grep"
alias ggjson="find . -name \*.json | xargs grep"

# HTML (.html, .htm, and .css) files
alias ghtml="find . -maxdepth 1 \( -name \*.html -o -name \*.htm -o -name \*.css \) -print | xargs grep"
alias gghtml="find . \( -name \*.html -o -name \*.htm -o -name \*.css \) -print | quotespaces | xargs grep"

# CSS files
alias gcss="find . -maxdepth 1 -name \*.css -print | xargs grep"
alias ggcss="find . -name \*.css -print | quotespaces | xargs grep"

# SASS (scss) files
alias gscss="find . -maxdepth 1 -name \*.scss -print | xargs grep"
alias ggscss="find . -name \*.scss -print | quotespaces | xargs grep"

# web ui files
alias gw="find . -maxdepth 1 \( -name \*.html -o -name \*.jsp -o -name \*.vm -o -name \*.xml -o -name \*.js -o -name \*.jsx -o -name \*.tsx \) -print | xargs grep"
alias ggw="find . \( -name \*.html -o -name \*.jsp -o -name \*.vm -o -name \*.xml -o -name \*.js -o -name \*.jsx -o -name \*.tsx \) -print | quotespaces | xargs grep"

# xml files
alias gxml="find . -maxdepth 1 -name xml -print | xargs grep"
alias findxml="find . -name \*.xml -print"
alias ggxml="findxml | quotespaces | xargs grep"

# .pl files
alias gpl="ls -1 *.pl | xargs grep"
alias ggpl="find . \( -name \*.pl \) -print | quotespaces | xargs grep"

# .sql and .ddl files
#  -i case Insensitive!
alias gsql="ls -1 *.sql *.ddl | xargs grep"
alias ggsql="find . \( -name \*.sql -o -name \*.ddl \) -print | quotespaces | xargs grep -i"

# Lisp (.lisp) files
#  -i case Insensitive!
#alias gl  'grep -i \!* *.lisp'
#alias ggl 'find -name \*.lisp -print | xargs grep -i \!*'

# Emacs lisp (.el) files
#  -i case Insensitive!
alias gel="find . -maxdepth 1 -name \*.el -print | xargs grep -i"
alias findel="find . -name \*.el -print"
alias ggel="findel | xargs grep -i"

# kotlin (*.kt) files
alias gkt="find . -maxdepth 1 -name \*.kt -print | xargs grep"
alias findkt="find . -name \*.kt -print"
alias ggkt="findkt | xargs grep"

# text files (.txt) files
alias gtxt="find . -maxdepth 1 -name \*.txt -print | xargs grep"
alias findtxt="find . -name \*.txt -print"
alias ggtxt="findtxt | quotespaces | xargs grep"

# markdown files (.md) files
alias gmd="find . -maxdepth 1 -name \*.md -print | xargs grep"
alias findmd="find . -name \*.md -print"
alias ggmd="findmd | quotespaces | xargs grep"

# python files
alias gpy="find . -maxdepth 1 \( -name \*.py \) -print | xargs grep"
alias findpy="find . \( -name \*.py \) -print"
alias ggpy="findpy | quotespaces | xargs grep"

# just clojure (no clojure script) files
alias gclj_="find . -maxdepth 1 \( -name \*.clj \) -print | xargs grep"
alias findclj_="find . \( -name \*.clj \) -print"
alias ggclj_="findclj_ | quotespaces | xargs grep"

# clojure script files# clojure (& clojure script) files
alias gclj="find . -maxdepth 1 \( -name \*.clj -o -name \*.cljs \) -print | xargs grep"
alias findclj="find . \( -name \*.clj -o -name \*.cljs \) -print"
alias ggclj="findclj | quotespaces | xargs grep"

# clojure script files
alias gcljs="find . -maxdepth 1 \( -name \*.cljs \) -print | xargs grep"
alias findcljs="find . \( -name \*.cljs \) -print"
alias ggcljs="findcljs | quotespaces | xargs grep"


#
# gr* development...
#
function g() {
    #if [ -e "./grailsw" ] ; then
    #    ./grailsw $@
    #elif [ -d "./grails-app" ] ; then
    if [ -d "./grails-app" ] ; then
        if [ -e "./grailsw" ] ; then
            echo "  [ using local grailsw ]"
            ./grailsw $@
        else
            echo "  [ using installed grails ]"
            grails $@
        fi
    elif [ -e "./build.gradle" ] ; then
        if [ -e "./gradlew" ] ; then
            echo "  [ using local gradlew ]"
            ./gradlew $@
        else
            echo "  [ using installed gradle ]"
            gradle $@
        fi
    else
        echo "WARNING: directory does not appear to be a grails nor gradle app."
    fi
}

alias gra="g run-app"
alias gca="g clean"

alias gra-utc="g -Duser.timezone=UTC run-app"
alias gra-prod="g -Duser.timezone=UTC prod run-app"

# and don't forget about the bin/gba (browse app) script

alias gta="g test-app"
alias gta-utc="g -Duser.timezone=UTC test-app"
alias gtf="gta-utc fitnesse:"
alias gti="gta-utc integration:"
alias gtu="gta-utc unit:"
alias rgta="gta-utc -rerun"
alias rgti="gta-utc -rerun integration:"
alias rgtu="gta-utc -rerun unit:"

# These all caps alias start by doing a clean and package.
alias GRA="g+ clean package ; gra"
alias GTA="g+ clean package ; gta"
alias GTF="g+ clean package ; gtf"
alias GTI="g+ clean package ; gti"
alias GTU="g+ clean package ; gtu"
alias GCN="g+ clean package ; gcn"

alias GRA-UTC="g+ clean package ; gra-utc"
alias GTA-UTC="g+ clean package ; gta-utc"

alias GQA="g clean ; grails package ; grails -Dgrails.env=qa war"

alias gtr='open target/test-reports/html/index.html'

function gtested() {
  grails test-app $@
  if [ -z "$(ls -A target/test-reports/plain)" ]; then
    echo "NOTHING TESTED"
  else
    open target/test-reports/html/index.html
  fi
}

alias gs="g -Dgrails.env=server"
alias gprimed="g -Dgrails.env=primeForDesktop"
alias gprimem="g -Dgrails.env=primeForMySql"

alias gdeploy="g maven-deploy --repository=pluginSnapshots"
alias ginstall="g maven-install"
alias guninstall="g maven-uninstall"

alias gcn="g codenarc"
alias gdr="g dependency-report"
alias gmetrics="g gmetrics"
alias gcoverage="( rm -fv cobertura.ser ; g test-app -coverage )"
alias greports="time ( g clean && g compile && gcoverage && gmetrics && gcn )"

alias gg="find . -maxdepth 1 -name \*.goovy -print | xargs grep"
alias findg="find . -name \*.groovy -print"

#function ggg() {
#  # the final grep in the pipeline is to get the match highlighting!
#  findg | xargs grep $@ \
#    | grep -v \/target\/plugins\/ \
#    | grep -v \/target\/work\/plugins\/ \
#    | grep $@
#}
alias ggg="findg | quotespaces | xargs grep"
alias ggg-all="findg | xargs grep" # like ggg, but does not filter out target dir.
function ggg-nt() { # like ggg, but filters out test classes
    # the final grep in the pipeline is to get the match highlighting!
    ggg $@ \
        | grep -v \/test\/unit\/ \
        | grep -v \/test\/integration\/ \
        | grep -v \/test\/functional\/ \
        | grep -v \/test\/slow\/ \
        | grep -v \/grails-app\/fitnesse\/ \
        | grep $@
        #| grep -v \/target\/plugins\/ \
        #| grep -v \/target\/work\/plugins\/
}

alias findgsp="find . -name \*.gsp -print"
alias ggsp="find . -maxdepth 1 -name \*.gsp | xargs grep"
alias gggsp="findgsp | xargs grep"

alias findprop="find . -name \*.properties -print"
function ggprop() {
    # the final grep in the pipeline is to get the match highlighting!
    findprop | xargs grep $@ \
        | grep -v \/target\/plugins\/ \
        | grep -v \/target\/work\/plugins\/
}

alias findi18n="find . -name messages.properties -print"
function ggi18n() {
    findi18n | xargs grep $@ \
        | grep -v \/target\/plugins\/ \
        | grep -v \/target\/work\/plugins\/ \
        | grep $@
}

alias findyml="find . \( -name \*.yml -o -name \*.yaml \) -print"
function ggyml() {
    # the final grep in the pipeline is to get the match highlighting!
    findyml | xargs grep $@ \
        | grep -v \/target\/plugins\/ \
        | grep -v \/target\/work\/plugins\/
}

alias findrs="find . \( -name \*.rs -o -name \*.toml \) -print"
function ggrs() {
    # the final grep in the pipeline is to get the match highlighting!
    findrs | xargs grep $@
}


#
# for looking into and purging caches maintained by maven, ivy, and grails, gradle, ...
#

# makes tarballs of cache dirs so they can be recovered later
function cache-caches() {
    cacheDir=~/cached-caches
    timestamp=`date '+%Y.%m.%d_%I.%M.%S'`

    mkdir -p $cacheDir/dot-gradle
    ( cd ~/.gradle ; tar cvfz $cacheDir/dot-gradle/gradle-caches_$timestamp.tar.gz ./caches )

    mkdir -p $cacheDir/dot-grails
    ( cd ~/.grails ; tar cvfz $cacheDir/dot-grails/ivy-cache_$timestamp.tar.gz ./ivy-cache )

    mkdir -p $cacheDir/dot-ivy2
    ( cd ~/.ivy2 ; tar cvfz $cacheDir/dot-ivy2/cache_$timestamp.tar.gz ./cache )

    mkdir -p $cacheDir/dot-m2
    ( cd ~/.m2 ; tar cvfz $cacheDir/dot-m2/repository_$timestamp.tar.gz ./repository )
}



function inspect-grails-cache() {
    ( cd ~ ; find .grails/ivy-cache -type d | grep -i $1 )
}
function inspect-gradle-cache() {
    ( cd ~ ; find .gradle/caches -type d | grep -i $1 )
}
function inspect-ivy-cache() {
    ( cd ~ ; find .ivy2 -type d | grep -i $1 )
}
function inspect-m2-cache() {
    ( cd ~ ; find .m2 -type d | grep -i $1 )
}
function inspect-caches() {
    echo
    echo gradle caches ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    inspect-gradle-cache $1

    echo
    echo grails caches ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    inspect-grails-cache $1

    echo
    echo ivy cache ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    inspect-ivy-cache $1

    echo
    echo mvn cache ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    inspect-m2-cache $1
}

function purge-gradle-cache() {
    ( cd ~ ; find .gradle -name \*$1\* | xargs rm -rvf )
}
function purge-grails-cache() {
    ( cd ~ ; find .grails/ivy-cache -name \*$1\* | xargs rm -rvf )
    if [ -d ./target/plugin-classes ] ; then
        ( find ./target/plugin-classes -type d -name \*$1\* | xargs rm -rvf )
    fi
    if [ -d ./target/plugins ] ; then
        ( find ./target/plugins -type d -name \*$1\* | xargs rm -rvf )
    fi
}
function purge-ivy-cache() {
    ( cd ~ ; find .ivy2 -name \*$1\* | xargs rm -rvf )
}
function purge-m2-cache() {
    ( cd ~ ; find .m2 -name \*$1\* | xargs rm -rvf )
}
function purge-caches() {
    echo
    echo purging gradle caches ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    purge-gradle-cache $1

    echo
    echo purging grails caches ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    purge-grails-cache $1

    echo
    echo purging ivy cache ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    purge-ivy-cache $1

    echo
    echo purging mvn cache ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    purge-m2-cache $1
}


#
# to checkout a PR into a local branch...
#
function gitcopr() {
    echo "PR $1 is in local branch"
    git fetch upstream pull/$1/head:pr-$1
    git co pr-$1
 }

#
# for finding all modified files in a local git clone...
#
function gitmod() {
    git status -s | grep \ M\   | awk '{ print $2 }'
    git status -s | grep \?\?\  | awk '{ print $2 }'
}

# similar to gitmod, but only included thigs from here on down the directory tree
function gitmod_() {
    gitmod | grep -v "\.\./"
}

function gitmedit() {
    gitmod | files | edit
}


function gitmedit_() {
    gitmod_ | files | edit
}


function gitupstream () {
    git fetch upstream
    git checkout master
    git merge upstream/master
    #git push
}

function gitlistlocalbranches () {
  git branch -r \
    | awk '{print $1}' \
    | egrep -v -f /dev/fd/0 <(git branch -vv | grep origin) \
    | awk '{print $1}'
}
function gitprunelocalbranches () {
  gitlistlocalbranches | xargs git branch -d
}

#
# for running the same command in many directories...
#
# example:  forall gradle build
#
function forall() {
    command=$1 ; shift # the command to execute
    #time ( \
        find . -type d -depth 1 | sort | while read directory ; do
            cd $directory
            local PWD=`pwd`
            local VC_INFO=`parse_vc_branch`
            printf "\nforall: $LIGHT_BLUE${PWD} ${CYAN}${VC_INFO}$NO_COLOUR> $command $@ \n"
            $command $@
        done # end while \
    #)
}

#
# for running the same command in many directories when the dir contains a file of a specific name...
#
# example:  forallwhere build.gradle gradle build
#
function forallwhere() {
    flag=$1    ; shift # executed in each immediate subdir that contains a file of this name
    command=$1 ; shift # the command to execute
    #time ( \
        if [ -e "$flag" ] ; then
            # just run the comman once in the current dir
            local PWD=`pwd`
            local VC_INFO=`parse_vc_branch`
            printf "\nforallwhere $flag: $LIGHT_BLUE${PWD} ${CYAN}${VC_INFO}$NO_COLOUR> $command $@ \n"
            $command $@
        else
            find . -type d -depth 1 | sort | while read directory ; do
                if [ -e "$directory/$flag" ] ; then
                    (
                        cd $directory
                        local PWD=`pwd`
                        local VC_INFO=`parse_vc_branch`
                        printf "\nforallwhere $flag: $LIGHT_BLUE${PWD} ${CYAN}${VC_INFO}$NO_COLOUR> $command $@ \n"
                        $command $@
                    )
                fi
            done # end while \
        fi
    #)
}

function forallwhere2() {
    flag=$1    ; shift # executed in each immediate subdir that contains a file of this name
    command=$1 ; shift # the command to execute
    #time ( \
        if [ -e "$flag" ] ; then
            # just run the comman once in the current dir
            local PWD=`pwd`
            local VC_INFO=`parse_vc_branch`
            printf "\nforallwhere $flag: $LIGHT_BLUE${PWD} ${CYAN}${VC_INFO}$NO_COLOUR> $command $@ \n"
            $command $@
        else
            find . -type d | while read directory ; do
                if [ -e "$directory/$flag" ] ; then
                    (
                        cd $directory
                        local PWD=`pwd`
                        local VC_INFO=`parse_vc_branch`
                        printf "\nforallwhere $flag: $LIGHT_BLUE${PWD} ${CYAN}${VC_INFO}$NO_COLOUR> $command $@ \n"
                        $command $@
                    )
                fi
            done # end while \
        fi
    #)
}


function gradleall() { # run gradle in the directories that have build.gradle
    forallwhere build.gradle g $@
}

function grailsall() { # run grails in the directories that have grails-app
    forallwhere grails-app grails $@
}

function mvnall() { # run maven in the directories that have pom.xml
    forallwhere pom.xml mvn $@
}

function gitall() { # run git in the directories that have .git
    if [ $# -eq 0 ]; then
        echo "WARNING: No arguments supplied"
    else
        forallwhere .git git $@
    fi
}

function deep-gitall() { # run gitall in all subdirs
    find . -depth 1 -type d | sort | while read directory ; do
        (
            echo "----------------------------------------------------------------------------------"
            #echo $directory
            cd $directory
            gitall $@
        )
    done # end while
}

function hgall() { # run hg in the directories that have .hg
    if [ $# -eq 0 ]; then
        echo "WARNING: No arguments supplied"
    else
        forallwhere .hg hg $@
    fi
}

function branches() { # show what branches we're on
    # this depends on the format of the prompt as emitted by the *all commands
    gitall mod | grep git: | awk '{ print $3 $4 }'
    #hgall st | grep hg:
}


#
# browse to git web server
#
function gitweb() {
    GITSERVER=https://github.com
    git branch > /dev/null 2> /dev/null
    if [ $? -eq 0 ] ; then # we're in a cloned git repo
        FETCH_URL=`git remote show origin | grep Fetch | awk '{ print $3 }'`
        if    [[ "$FETCH_URL" == https* ]] ; then
          # already https
          URL=`echo $FETCH_URL | sed 's/.git$//'`
        elif  [[ "$FETCH_URL" == git@* ]] ; then
          # translate from "git@..." to "https://..."
          URL=`echo $FETCH_URL | sed 's/:/\\//g' | sed 's/^git@/https:\/\//' | sed 's/.git$//'`
        else
          URL=$FETCH_URL
        fi

        BRANCH=`git branch 2> /dev/null | grep \* | awk '{ printf "%s", $2 }'`
        if [ $# -ne 0 ] ; then # maybe we have a PR number?
            re='^[0-9]+$'
            if [[ $1 =~ $re ]] ; then
                URL=$URL/pull/$1
            else
                echo "error: Not a PR number"
            fi
        elif [ "$BRANCH" != "master" ] ; then # browse to the interesting branch
            URL=$URL/tree/$BRANCH
        fi
    else
        URL=$GITSERVER
    fi

    echo $URL
    browse $URL
}

#
# browse to a jira ticket
#
function jira() {
    JIRA_BASE=https://????/jira

    FAVORITE_PROJECT=26769 # accounts
    DEFAULT_BOARD=$FAVORITE_PROJECT
    ticket=$1
    if [ -n "$ticket" ]; then
        URL=$JIRA_BASE/browse/$ticket
    else
        URL=$JIRA_BASE/secure/RapidBoard.jspa?rapidView=$DEFAULT_BOARD
    fi

    echo $URL
    browse $URL
}

#
# browse to a shortcut ticket
#
function shortcut() {
    BASE=https://app.shortcut.com/gravie
    DEFAULT=stories/space/43599

    ticket=`echo $1 | sed 's/sc//' | sed 's/-//'`
    if [ -n "$ticket" ]; then
        URL=$BASE/story/$ticket
    else
        URL=$BASE/$DEFAULT
    fi

    echo $URL
    browse $URL
}

#
# browse to a freshservice ticket
#
function freshservice() {
    BASE=https://gravie.freshservice.com/
    DEFAULT=helpdesk/tickets/view/103256

    ticket=$1
    if [ -n "$ticket" ]; then
        URL=$BASE/helpdesk/tickets/$ticket
    else
        URL=$BASE/$DEFAULT
    fi

    echo $URL
    browse $URL
}

#
# browse a service now ticket
#
function service-now() {
    TICKET=$1
    URL="https://????.service-now.com/text_search_exact_match.do?sysparm_search=$TICKET"
    echo $URL
    browse $URL
}


#
# for bulk processing markdown files into html
#
function md2htmlall() {
    find . -type f -name \*.md -maxdepth 1 | while read mdfile ; do
        target=$mdfile.html
        echo "$mdfile --> $target"
        md2html $mdfile > $target
    done # end while
}


#
# gource...
#
function gource_default() {
    gource \
        -s 2 \
        -a 1 \
        $@ \
        ./
    # -WIDTHxHIEGHT
    # --loop
    # --fullscreen
}

function gource2movie() {
    size=$1
    if [ -z $size ] ; then
        # use the default size
        size=1920x1080
    fi
    gource \
        -s 2 \
        -a 1 \
        ./ \
        -o - \
        -$size \
    | ffmpeg \
        -y \
        -r 60 \
        -f image2pipe \
        -vcodec ppm \
        -i - \
        -vcodec libx264 \
        -preset ultrafast \
        -pix_fmt yuv420p \
        -crf 1 \
        -threads 0 \
        -bf 0 \
        gource.mp4
}

function gource2movie_small() {
    gource2movie 800x600
}


#
# local install...
#
alias dashboard-stop="defaults write com.apple.dashboard mcx-disabled -boolean YES ; killall Dock"
alias dashboard-start="defaults write com.apple.dashboard mcx-disabled -boolean NO ; killall Dock"

alias dock-2d="defaults write com.apple.Dock no-glass -boolean YES ; killall Dock"
alias dock-3d="defaults write com.apple.Dock no-glass -boolean NO ; killall Dock"

# an attempt to resolve the sopradically poor audio quality with the plantronics bluetooth headset
alias a2dp='defaults write com.apple.BluetoothAudioAgent "Apple Bitpool Min (editable)" 53'

alias spotlight-stop="sudo mdutil -a -i off"
alias spotlight-start="sudo mdutil -a -i on"

alias clearrecents="defaults delete -g AppleRecentFolders"

# Show Full Directory Path in Mac OS X Finder Window Title Bars
#defaults write com.apple.finder _FXShowPosixPathInTitle -bool YES ; killall Finder
#defaults write com.apple.finder _FXShowPosixPathInTitle -bool NO ; killall Finder


# e.g. `sort-pictures .`
alias sort-pictures="exiftool '-Directory<DateTimeOriginal' -d %Y/%Y.%m/%Y.%m.%d"


alias jenkins-start="sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist"
alias jenkins-stop="sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist"


function ly () {
    FILE=$1
    docker run --rm -v $(pwd):/app -w /app gpit2286/lilypond lilypond $FILE
}



#alias mysql-start="sudo launchctl load -w /Library/LaunchDaemons/com.mysql.mysql.plist"
#alias mysql-stop="sudo launchctl unload -w /Library/LaunchDaemons/com.mysql.mysql.plist"
#alias mysql-start="mysql.server start"
#alias mysql-status="mysql.server status"
#alias mysql-stop="mysql.server stop"
#alias mysql-bounce="mysql-stop ; mysql-start"

alias rabbit-start="rabbitmq-server"
alias rabbit-stop="rabbitmqctl stop"


# hg aliases (originally borrowed from Ted Naleid)...
alias hs="hg status"
alias hgh="hg heads -t"
function lf() {
   grep files | awk '{for (i=2; i<=NF; i++)  print $i }' | sort | uniq
}
alias ic="hg incoming -v -S | lf"
alias og="hg outgoing -v -S | lf"
alias kdiff3=~/devtools/kdiff3/kdiff3.app/Contents/MacOS/kdiff3


alias ssync="$LOCAL_APPS/SmartSynchronize.app/Contents/MacOS/SmartSynchronize"

alias squirrel="open -a SquirrelSQL"
alias robo="open -a Robo\ 3T"

# touch and edit a new file with emacs
function temacs() {
    touch $@
    emacs $@
}


function fast-node() {
    if [ ! -d "./node_modules" ] ; then
        echo "fast-node: mkdir ./node_modules"
        mkdir ./node_modules
    fi
    # this will keep spotlight from indexing node_modules
    echo "fast-node: touch ./node_modules/.metadata_never_index"
    touch ./node_modules/.metadata_never_index
}


function matrix() {
    LC_ALL=C tr -c "[:digit:]" " " < /dev/urandom | dd cbs=$COLUMNS conv=unblock | GREP_COLOR="1;32" grep --color "[^ ]"
}
alias parrot="curl parrot.live"
alias starwars="telnet towel.blinkenlights.nl"


function encrypt() {
    FILE=$1
    openssl des -in $FILE -out $FILE.des
}

function decrypt() {
    FILE=$1
    openssl des -d -in $FILE.des -out $FILE
}

function beep() {
    count=5
    for i in $(seq $count); do
        tput bel
    done
}

# -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=- -=-=-
